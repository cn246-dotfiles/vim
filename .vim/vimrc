"------------------------------------------------------------
" Plugins
"------------------------------------------------------------
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Use vim-plug for plugins.
call plug#begin('~/.vim/plugged')
Plug 'dense-analysis/ale'             " File linting
Plug 'hashivim/vim-terraform'         " Terraform syntax highlighting
Plug 'kshenoy/vim-signature'          " Place toggle and display Vim marks
Plug 'sainnhe/edge'
" Plug 'sainnhe/everforest'
" Plug 'sainnhe/sonokai'
Plug 'tpope/vim-commentary'           " Code commenting
Plug 'tpope/vim-fugitive'             " Git integration
Plug 'tpope/vim-repeat'               " Repeat vim motions with .
Plug 'tpope/vim-surround'             " Wrap words,etc with quotes or brackets
Plug '~/.vim/plugged/vim-redact-pass' " Switch caching off when editing a pass entry
Plug '~/.vim/plugged/vault-edit'      " Switch caching off when editing a pass entry
"Plug 'mattn/emmet-vim'               " Expand code abbreviations
call plug#end()

" Enable matchit
runtime macros/matchit.vim

"------------------------------------------------------------
" Colorscheme
"------------------------------------------------------------
" Habamax
colorscheme habamax

" Everforest
" let g:everforest_background = 'soft'  " hard, medium, soft
" colorscheme everforest

" Edge
" set background=light
" let g:edge_style = 'aura'  " default, aura, neon
" let g:edge_dim_foreground = 1
" let g:edge_disable_terminal_colors = 1
" colorscheme edge

" Sonokai
" let g:sonokai_style = 'maia'  " andromeda, atlantis, maia, shusia
" colorscheme sonokai


" Configure git merge conflict colors - :help syn-pattern
function! ConflictsHighlight() abort
    syntax match conflictMarker "^\(<<<<<<<.*\||||||||.*\|>>>>>>>.*\|=======\)$"
    highlight conflictMarker ctermfg=208
endfunction

augroup conflictColors
    autocmd!
    autocmd BufEnter * call ConflictsHighlight()
augroup END

"------------------------------------------------------------
" General
"------------------------------------------------------------
filetype indent plugin on              " Guess filetype based on name & contents
set autoindent                         " Keep same indent as the line you're on
set backspace=indent,eol,start         " Backspace over indent, eol and start
set complete+=kspell                   " Set matches for completion
" set completeopt=menuone,noinsert       " Options for completion
set completeopt=menuone                " Options for completion
set confirm                            " Ask to save changed files
set dictionary+=/usr/share/dict/words  " Set dictionary file location
set encoding=utf8                      " Set utf8 as standard encoding
set expandtab                          " Use spaces instead of tabs
set ffs=unix,dos,mac                   " Set Unix as standard file type
set hidden                             " Switch buffers without saving first
set hlsearch                           " Highlight searches
set ignorecase                         " Use case insensitive search
set incsearch                          " Highlight as you type a search term
set mouse=a                            " Enable use of the mouse for all modes
set nospell                            " Disable spellcheck
set nostartofline                      " Stop going to first character of line
set notimeout ttimeout ttimeoutlen=200 " Time out on keycodes, but not mappings
set omnifunc=syntaxcomplete#Complete   " Enable Omni Completion
set previewheight=25                   " Bigger preview window (eg. ALEInfo)
set shiftwidth=2                       " Set column number for indentation
set shortmess+=c                       " Avoid some error messages
set smartcase                          " Except when using capital letters
set softtabstop=2                      " Use 2 spaces instead of tabs
set spelllang=en_us                    " Set spellcheck to en_us
set splitbelow                         " Send splits to bottom
set splitright                         " Send splits to right
set t_vb=                              " Neither flash nor beep
set visualbell                         " Visual bell instead of beeping
syntax on                              " Enable syntax highlighting

"------------------------------------------------------------
" Visual Helpers
"------------------------------------------------------------
set cmdheight=2                        " Set command window height to 2 lines
set colorcolumn=80                     " Highlight column 80
set cursorline                         " Highlight current line
set laststatus=2                       " Always display the status line
set list                               " Mark whitespace and tabs, etc.
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·
set modeline                           " Set filetype and indentation via comment
set modelines=3                        " Look for modeline in bottom 3 lines
set relativenumber                     " line numbers counting away from cursor
set ruler                              " Cursor position in the status line
set showcmd                            " Show commands in last line of screen
set wildmenu                           " Better command-line completion
set wildmode=longest:full,full         " Completion mode

"------------------------------------------------------------
" Folding
"------------------------------------------------------------
set foldcolumn=2                       " Show folds in sidebar
set foldmethod=indent                  " Set fold method to indent
set nofoldenable                       " Don't fold initially

" Set manual folding from indent mode when attempting to define a fold with zf
nnoremap <expr> zf
    \ &foldmethod == 'indent' ? '<cmd>setlocal foldmethod=manual<CR>zf' : 'zf'

" Set manual folding from indent mode when attempting to delete a fold with zd
nnoremap <expr> zd
    \ &foldmethod == 'indent' ? '<cmd>setlocal foldmethod=manual<CR>zd' : 'zd'

"------------------------------------------------------------
" Statusline
"------------------------------------------------------------
set statusline=%f                         " Filepath
set statusline+=\                         " A space
set statusline+=%y                        " Filetype
set statusline+=\ %{FugitiveStatusline()} " Current branch & edited file's commit
set statusline+=\ %m                      " Modified flag
set statusline+=%*                        " Restore default highlight
set statusline+=%=                        " Split the left and right sides
set statusline+=%3c                       " Column number
set statusline+=\ \|\                     " A separator
set statusline+=\                         " A space
set statusline+=%l/%L                     " Line number/Total lines
set statusline+=\                         " A space
set statusline+=%p%%                      " Position in percentage
set statusline+=\                         " A space

"------------------------------------------------------------
" File Browsing
"------------------------------------------------------------
let g:netrw_banner=0                   " Don't show text at top of file tree
let g:netrw_browse_split=4             " Open in same buffer as existing file
let g:netrw_winsize=20                 " Set file tree at 20% of window width
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+,__pycache__,.DS_Store,.idea,.git,.venv,node_modules,*\.o,*\.pyc,.*\.swp'
let g:netrw_liststyle=3                " Set file list style

"------------------------------------------------------------
" File Searching
" https://gist.github.com/romainl/56f0c28ef953ffc157f36cc495947ab3
"------------------------------------------------------------
if executable('rg')
    set grepprg=rg\ --vimgrep\ --smart-case\ --hidden
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

function! Grep(...)
    return system(join([&grepprg] + [expandcmd(join(a:000, ' '))], ' '))
endfunction

command! -nargs=+ -complete=file_in_path -bar Grep  cgetexpr Grep(<f-args>)
command! -nargs=+ -complete=file_in_path -bar LGrep lgetexpr Grep(<f-args>)

cnoreabbrev <expr> grep  (getcmdtype() ==# ':' && getcmdline() ==# 'grep')  ? 'Grep'  : 'grep'
cnoreabbrev <expr> lgrep (getcmdtype() ==# ':' && getcmdline() ==# 'lgrep') ? 'LGrep' : 'lgrep'

augroup quickfix
    autocmd!
    autocmd QuickFixCmdPost cgetexpr cwindow
    autocmd QuickFixCmdPost lgetexpr lwindow
augroup END

"------------------------------------------------------------
" Mappings
"------------------------------------------------------------
" Set leader to spacebar
let mapleader=" "

" Source Vim config file.
nnoremap <leader>sv :source $MYVIMRC<CR>

" Move between splits with <space>+[h,j,k,l]
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>

" Copy/paste
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>p "+p
vnoremap <leader>p "+p

" Open file browser with <space>+pv
nnoremap <leader>pv :Lexplore<CR>

" Buffers
nnoremap gb :ls<CR>:buffer<Space>
nnoremap <leader>b :buffer *

" Find
set path=.,**
:nnoremap <leader>f :find *

" Tab navigaton
" TODO: this cycles through actual terminal tabs, not vim tabs.
" nnoremap <C-S-TAB> :tabprevious<CR>
" nnoremap <C-TAB>   :tabnext<CR>

" Turn off search highlighting until the next search
nnoremap <C-L> :nohl<CR><C-L>

" Tab to cycle autocomplete selections
inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

" Use <F11> to toggle paste
set pastetoggle=<F11>

"------------------------------------------------------------
" ALE
"------------------------------------------------------------
" Navigate ALE errors
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" Run :ALEFix
nnoremap <leader>af :ALEFix<CR>

" Toggle ALE
map <leader>at :ALEToggle<CR>

"------------------------------------------------------------
" Modeline
" https://vim.fandom.com/wiki/Modeline_magic#Adding_a_modeline
"------------------------------------------------------------
function! AppendModeline()
    let l:modeline = printf("vim: ft=%s ts=%d sts=%d sw=%d %ssr %set",
        \ &filetype, &tabstop, &softtabstop, &shiftwidth,
        \ &shiftround ? '' : 'no', &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), "")
    call append(line("$"), l:modeline)
endfunction

nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

"------------------------------------------------------------
" Pastebins
" https://gist.github.com/romainl/1cad2606f7b00088dda3bb511af50d53
"------------------------------------------------------------
if has('linux')
    " Sometimes vpaste only copies "Spam check..."
    command! -range=% VP <line1>,<line2>w !curl -F 'text=<-' http://vpaste.net
        \| tr -d '\n' | xclip -i -selection clipboard
    command! -range=% PP <line1>,<line2>w !curl -F 'file=@-;' https://envs.sh
        \| tr -d '\n' | xclip -i -selection clipboard
elseif has('osx')
    " Sometimes vpaste only copies "Spam check..."
    command! -range=% VP <line1>,<line2>w !curl -F 'text=<-' http://vpaste.net
        \| tr -d '\n' | pbcopy
    command! -range=% PP <line1>,<line2>w !curl -F 'file=@-;' https://envs.sh
        \| tr -d '\n' | pbcopy
endif

map vp :exec "w !

"------------------------------------------------------------
" Registers
" https://stackoverflow.com/a/39348498
"------------------------------------------------------------
function! ClearRegs() abort
    let regs=split('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-"', '\zs')
    for r in regs
        call setreg(r, @_)
    endfor
endfunction

command! Cleareg call ClearRegs()

"------------------------------------------------------------
" Spellcheck
"------------------------------------------------------------
" Toggle spell check.
nnoremap <F5> :setlocal spell!<CR>

" Compile wordlists in case of manual changes or new files
function! SpellUpdate()
    for d in globpath(&runtimepath, "spell/*.add", 0, 1)
        execute "mkspell! " . fnameescape(d)
    endfor
endfunction

command! SpellUpdate call SpellUpdate()

"------------------------------------------------------------
" Sudo
"------------------------------------------------------------
function! Sudow()
    :w !sudo tee % > /dev/null
endfunction

command! Sudow call Sudow()

"------------------------------------------------------------
" Terminal
"------------------------------------------------------------
nmap <F6> :tab :term ++close<CR>
tnoremap <F6> <C-W>N

" terminal in split window
map <Leader>t :term ++close<cr>
 map <Leader>T :vert term ++close<cr>
" map <Leader>vt :vert term ++close<cr>

" terminal in new tab
map <Leader>tt :tab term ++close<cr>
" map <Leader>T :tab term ++curwin ++close<cr>

"------------------------------------------------------------
" Undo
"------------------------------------------------------------
if !isdirectory($HOME . "/.vim/cache")
  call mkdir($HOME . "/.vim/cache", "p", 0700)
endif

if !isdirectory($HOME . "/.vim/cache/backup")
  call mkdir($HOME . "/.vim/cache/backup", "p", 0700)
endif

if !isdirectory($HOME . "/.vim/cache/swap")
  call mkdir($HOME . "/.vim/cache/swap", "p", 0700)
endif

set dir=~/.vim/cache/swap//
set backupdir=~/.vim/cache/backup//

" set nobackup
" set nowritebackup

function Tmpwatch(path, days)
    let l:path = expand(a:path)
    if isdirectory(l:path)
        for file in split(globpath(l:path, "*"), "\n")
            if localtime() > getftime(file) + 86400 * a:days && delete(file) != 0
                echo "Tmpwatch(): Error deleting '" . file . "'"
            endif
        endfor
    else
        echo "Tmpwatch(): Directory '" . l:path . "' not found"
    endif
endfunction

if exists("+undofile")
    if !isdirectory($HOME . "/.vim/cache/vimundo")
        call mkdir($HOME . "/.vim/cache/vimundo", "", 0700)
    endif
    set undodir=~/.vim/cache/vimundo//
    set undofile
    set undolevels=1000
    set undoreload=10000

    " remove undo files which have not been modified for 31 days
    call Tmpwatch(&undodir, 31)
endif

"------------------------------------------------------------
" Viminfo file
"------------------------------------------------------------
set viminfo=%,'100,/50,:100,<500,h,n~/.vim/cache/viminfo
"           | |    |    |   |    | + viminfo file path
"           | |    |    |   |    + disable 'hlsearch' when loading viminfo
"           | |    |    |   + save lines for each register
"           | |    |    + save command-line history
"           | |    + save search history
"           | + save file marks
"           + save/restore buffer list

"------------------------------------------------------------
" Whitespace
"------------------------------------------------------------
" Flag unnecessary whitespace
highlight BadWhitespace ctermbg=1 ctermfg=0
match BadWhitespace /\s\+$/
autocmd BufWinEnter * match BadWhitespace /\s\+$/
autocmd InsertEnter * match BadWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match BadWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Clean up whitespace
function! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfunction

noremap <leader>w :call TrimWhitespace()<CR>

" vim: set ft=vim ts=2 sts=2 sw=2 nosr et
